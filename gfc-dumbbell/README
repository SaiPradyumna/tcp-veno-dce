Steps to produce resuts:

1. Copy the dce-gfc-dumbbell.cc example ns-3-dce/examples folder and edit the wscript.

2. Copy gfc_dumbbell_parse_cwnd_v2.py file in ns-3-dce/utils folder.

3. Copy Linux-PlotScripts-gfc-dumbbell and ns3-PlotScripts-gfc-dumbbell in ns-3-dce folder.

4. Run the example using following command (Set whatever TCP you have to validate):
   For linux stack:
        ./waf --run "dce-gfc-dumbbell --stack=linux --linux_prot=reno"
   For ns3 stack:
        ./waf --run "dce-gfc-dumbbell --stack=ns3 --transport_prot=TcpNewReno"

5. After successfully running the example, a results folder will be created. This folder will contain a folder named gfc-dumbbell. This folder contains all the results named according to the start date and time of the simulation.

6. Go to the required folder and inside that go to pcap folder. Run plotshellTP.sh file in that directory.

7. This will create the Graphs folder in the directory just outside pcap folder containing all the graphs. And for linux stack a cwnd_data folder in results/gfc-dumbbell directory containing the congestion window graphs of all the senders will be created. (Keep the backup of cwnd_data folder if you are re-running example by moving this folder to some other location as re-running the example overwrites the data.)

Note: I have made some changes to the code and also made seprate plot scripts for linux and ns-3 stack. These changes will create all the plotme files with either linux or ns3 in its name, this will make it easier for you to plot overlapping graphs. You have to basically make overlapping graphs for cwnd and queue length for now, so you can make a gnuplot script once and plot the overlapping graphs using that plot script.

Also, plotshellTP.sh works fine with python version 2 so in plotshellTP.sh file I have changed python to python2.
